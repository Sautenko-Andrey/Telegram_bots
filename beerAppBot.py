import os
import telebot
from telebot import types
from tokens import beer_bot_token as my_token

from beerRNN_executor import ExecutorRNN

from matplotlib import pyplot as plt
from matplotlib.ticker import MaxNLocator, FixedLocator, FormatStrFormatter

bot = telebot.TeleBot(my_token.token)


@bot.message_handler(commands=["start", "hello", "hey", "–ø—Ä–∏–≤–µ—Ç"])
def start_Bot(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""

    # –ø—Ä–æ–ø–∏—à–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –ø–æ–∏—Å–∫–∞
    markup = types.InlineKeyboardMarkup(row_width=2)
    search_by_text_btn = types.InlineKeyboardButton("–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é", callback_data="search_by_text")
    search_by_img_btn = types.InlineKeyboardButton("–ü–æ—à—É—Ç –ø–æ —Ñ–æ—Ç–æ", callback_data="search_by_img")
    markup.add(search_by_text_btn, search_by_img_btn)

    # –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–∏–≤–∞
    bot.send_message(message.chat.id, f"–†–∞–¥ —Ç–µ–±–µ –±–∞—á–∏—Ç–∏, {message.from_user.first_name} üòÅ\n"
                                      f"–û–±–µ—Ä–∏ –Ω–∏–∂—á–µ —Å–ø–æ—Å–æ–± –ø–æ—à—É–∫—É –ø–∏–≤–∞ (–∑–∞ –Ω–∞–∑–≤–æ—é –∞–±–æ –ø–æ —Ñ–æ—Ç–æ)‚¨áÔ∏è",
                     reply_markup=markup)


@bot.callback_query_handler(func=lambda call: True)
def request_executor(call):
    # –ø–æ–ª—É—á–∞–µ–º —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –ø–∏–≤–∞
    mode = call.data

    #respond = "–ø–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é –ø–∏–≤–∞" if mode == "search_by_text" else "–ø–æ—à—É–∫ –ø–∏–≤–∞ –ø–æ —Ñ–æ—Ç–æ"

    # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    #bot.send_message(call.message.chat.id, f"–¢–∏ –æ–±—Ä–∞–≤ {respond} üëç")

    # –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞, –ø—Ä–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    if mode == "search_by_text":
        bot.send_message(call.message.chat.id, "–ù–∞–ø–∏—à–∏ <u>–Ω–∞–∑–≤—É –ø–∏–≤–∞</u> ‚Ü©Ô∏è", parse_mode="html")
        bot.register_next_step_handler(call.message, rnn_executor)
    elif mode == "search_by_img":
        bot.send_message(call.message.chat.id, "–ó–∞–≤–∞–Ω—Ç–∞–∂ <u>—Ñ–æ—Ç–æ –ø–∏–≤–∞</u> ‚Ü©Ô∏è", parse_mode="html")
        bot.register_next_step_handler(call.message, cnn_executor)
    elif mode == "yes":
        bot.send_message(call.message.chat.id, "–®—É–∫–∞—î–º–æ —â–µ —Ä–∞–∑! –£–†–ê–ê–ê–ê–ê!")
        start_Bot(call.message)
    elif mode == "no":
        bot.send_message(call.message.chat.id, "–û–ö, –ø–æ–±–∞—á–∏–º–æ—Å—å!\nüëã")
    else:
        bot.send_message(call.message.chat.id, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é, —â–æ –≤—ñ–¥ –º–µ–Ω–µ —Ö–æ—á—É—Ç—å)))")



def open_send_img(message, path):
    """–ú–µ—Ç–æ–¥ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:
        with open(path, "rb") as file:
            bot.send_photo(message.chat.id, file)
    except Exception as ex:
        print(f"Error while opening beer image: {ex}")


def rnn_executor(message):
    """–†–µ–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –ù–° –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""

    # –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–∏–≤–æ

    user_beer_request = message.text.strip()

    bot.send_message(message.chat.id, f"–ó–∞–ø–∏—Ç –Ω–∞ –ø–æ—à—É–∫ üìç<b>{user_beer_request}</b>üìç –ø—Ä–∏–π–Ω—è—Ç.\n–ü–æ—á–∏–Ω–∞—î–º–æ –ø–æ—à—É–∫!",
                     parse_mode="html")

    bot.send_message(message.chat.id, "üîé")


    # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ù–° (–Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∏–≤–∞)
    prediction = ExecutorRNN()
    pred_result, pred_img, pred_all_prices = prediction.identify_item(user_beer_request)

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    # bot.send_message(message.chat.id, f"–ú–∏ –∑–Ω–∞–π—à–ª–∏ —Ç–≤–æ—î –ø–∏–≤–æ!\n"
    #                                   f"–¶–µ : {pred_result}")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –µ–≥–æ –ø–∏–≤–æ–º
    # open_send_img(message,GetBeerData(result).send_data())
    open_send_img(message, pred_img)

    out_of_stock_msg = "<i>–Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ</i>"
    curr = " –≥—Ä–Ω"
    bp_msg = " - –∫—Ä–∞—â—è —Ü—ñ–Ω–∞!"

    prices = [x for x in pred_all_prices.values()]
    best_price = min([x for x in prices if x > 0])

    msg = ("<b><u>üí∞–¶—ñ–Ω–∏ —É –º–∞—Ä–∫–µ—Ç–∞—Ö:</u></b>\n<b>üî∫–ê–¢–ë</b>: " + (
        (str(pred_all_prices['atb']) + curr if pred_all_prices['atb'] > 0 else out_of_stock_msg) if pred_all_prices[
            'atb'] != best_price else f"<b><u>{str(pred_all_prices['atb']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫–ï–ö–û:</b> " + (
               (str(pred_all_prices['eko']) + curr if pred_all_prices['eko'] > 0 else out_of_stock_msg) if
               pred_all_prices['eko'] != best_price else f"<b><u>{str(pred_all_prices['eko']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫Varus:</b> " + (
               (str(pred_all_prices['varus']) + curr if pred_all_prices['varus'] > 0 else out_of_stock_msg) if
               pred_all_prices['varus'] != best_price else f"<b><u>{str(pred_all_prices['varus']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫–°—ñ–ª—å–ø–æ:</b> " + (
               (str(pred_all_prices['silpo']) + curr if pred_all_prices['silpo'] > 0 else out_of_stock_msg) if
               pred_all_prices['silpo'] != best_price else f"<b><u>{str(pred_all_prices['silpo']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫–ê—à–∞–Ω:</b> " + (
               (str(pred_all_prices['ashan']) + curr if pred_all_prices['ashan'] > 0 else out_of_stock_msg) if
               pred_all_prices['ashan'] != best_price else f"<b><u>{str(pred_all_prices['ashan']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫Novus:</b> " + (
               (str(pred_all_prices['novus']) + curr if pred_all_prices['novus'] > 0 else out_of_stock_msg) if
               pred_all_prices['novus'] != best_price else f"<b><u>{str(pred_all_prices['novus']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫Metro:</b> " + (
               (str(pred_all_prices['metro']) + curr if pred_all_prices['metro'] > 0 else out_of_stock_msg) if
               pred_all_prices['metro'] != best_price else f"<b><u>{str(pred_all_prices['metro']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫–ù–∞—à –ö—Ä–∞–π:</b> " + (
               (str(pred_all_prices['nk']) + curr if pred_all_prices['nk'] > 0 else out_of_stock_msg) if
               pred_all_prices['nk'] != best_price else f"<b><u>{str(pred_all_prices['nk']) + curr + bp_msg}</u></b>")
           + "\n<b>üî∫Fozzy:</b> " + (
               (str(pred_all_prices['fozzy']) + curr if pred_all_prices['fozzy'] > 0 else out_of_stock_msg)) if
           pred_all_prices['fozzy'] != best_price else f"<b><u>{str(pred_all_prices['fozzy']) + curr + bp_msg}</u></b>")

    bot.send_message(message.chat.id, msg, parse_mode="html")

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –ø–æ —Ü–µ–Ω–∞–º –Ω–∞ –ø–∏–≤–æ
    markets = ["–ê–¢–ë", "–ï–ö–û", "Varus", "–°—ñ–ª—å–ø–æ", "–ê—à–∞–Ω", "Novus", "Metro", "–ù–ö", "Fozzy"]

    # create plot
    fig = plt.figure(figsize=(7, 4))
    ax = fig.add_subplot()

    colors_diff = []
    for value in prices:

        if value == min([x for x in prices if x > 0]):
            colors_diff.append("red")
        else:
            colors_diff.append("blue")

    ax.bar(markets, prices, color=colors_diff)

    ax.bar(markets, prices, color=colors_diff)
    ax.yaxis.set_major_locator(MaxNLocator(10))
    ax.yaxis.set_major_formatter(FormatStrFormatter("%.2f"))
    #ax.legend(["–∫—Ä–∞—â—è —Ü—ñ–Ω–∞", "—Ü—ñ–Ω–∞"])
    # ax.text(0.05, 0.01, "–ß–µ—Ä–≤–æ–Ω–∏–º –≤–∏–¥—ñ–ª–µ–Ω–æ –∫—Ä–∞—â—É —Ü—ñ–Ω—É")
    plt.title("–¶—ñ–Ω–∏ —É –º–∞—Ä–∫–µ—Ç–∞—Ö, –≥—Ä–Ω (—á–µ—Ä–≤–æ–Ω–∏–º –≤–∏–¥—ñ–ª–µ–Ω–æ –∫—Ä–∞—â—É —Ü—ñ–Ω—É!)")
    counter = 0
    plt.savefig(f'compared_prices_{message.from_user.first_name}_{counter}.png')
    open_send_img(message, f'compared_prices_{message.from_user.first_name}_{counter}.png')
    # counter += 1

    # —É–¥–∞–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
    try:
        os.remove(f"./compared_prices_{message.from_user.first_name}_{counter}.png")
    except Exception:
        print(f"Error when delete diagram: ./compared_prices_{message.from_user.first_name}_{counter}.png")

    one_more_search(message)


def one_more_search(message):
    '''–ï—â–µ –æ–¥–∏–Ω –ø–æ–∏—Å–∫'''

    # –ø—Ä–æ–ø–∏—à–µ–º –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –¥–∞ –∏–ª–∏ –Ω–µ—Ç
    markup = types.InlineKeyboardMarkup(row_width=2)
    yes_btn = types.InlineKeyboardButton("–¢–ê–ö", callback_data="yes")
    no_btn = types.InlineKeyboardButton("–ù–Ü", callback_data="no")
    markup.add(yes_btn, no_btn)
    bot.send_message(message.chat.id, "–©—É–∫–∞–µ–º–æ —â–µ —Ä–∞–∑?üòä", reply_markup=markup)


def cnn_executor(message):
    """–°–≤–µ—Ä—Ç–æ—á–Ω–∞—è –ù–° –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ"""

    bot.send_message(message.chat.id, f"{message.from_user.first_name},–≤–∏–±–∞—á, –Ω–∞–∂–∞–ª—å –ø–æ—à—É–∫ –ø–æ —Ñ–æ—Ç–æ"
                                      f"—Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")


@bot.message_handler(content_types=["text", "audio", "video"])
def get_another(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –≤–≤–æ–¥–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    bot.send_message(message.chat.id, "–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —â–æ —Ç–∏ —Ö–æ—á–µ—à—å –≤—ñ–¥ –º–µ–Ω–µ üòÑ")
    bot.register_next_step_handler(message, start_Bot)


bot.polling(none_stop=True)
